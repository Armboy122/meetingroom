generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Room {
  roomId      Int           @id @default(autoincrement()) @map("room_id")
  roomName    String        @map("room_name") @db.VarChar(100)
  capacity    Int           @default(10)
  equipment   String?
  status      String        @default("active") @db.VarChar(20)
  createdAt   DateTime      @default(now()) @map("created_at")
  bookings    Booking[]
  closures    RoomClosure[]

  @@map("rooms")
}

model Booking {
  bookingId     String        @id @default(cuid()) @map("booking_id")
  roomId        Int           @map("room_id")
  title         String        @db.VarChar(200)
  description   String?
  startDatetime DateTime      @map("start_datetime")
  endDatetime   DateTime      @map("end_datetime")
  createdBy     String?       @map("created_by") @db.VarChar(100)
  organizerId   String?       @map("organizer_id")
  needsRefreshment Boolean     @default(false) @map("needs_refreshment")
  refreshmentSets Int?        @map("refreshment_sets")
  refreshmentNote String?     @map("refreshment_note")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  status        String        @default("pending") @db.VarChar(20)
  approvedBy    String?       @map("approved_by") @db.VarChar(100)
  approvedAt    DateTime?     @map("approved_at")
  rejectedReason String?      @map("rejected_reason")
  room          Room          @relation(fields: [roomId], references: [roomId])
  organizer     User?         @relation(fields: [organizerId], references: [userId])
  participants  Participant[]

  @@map("bookings")
}


model User {
  userId       String    @id @default(cuid()) @map("user_id")
  employeeId   String    @unique @map("employee_id") @db.VarChar(20)
  fullName     String    @map("full_name") @db.VarChar(100)
  position     String?   @map("position") @db.VarChar(150)
  department   String?   @map("department") @db.VarChar(150)
  email        String?   @db.VarChar(150)
  status       String    @default("active") @db.VarChar(20)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  bookings     Booking[]

  @@map("users")
}

model AdminSettings {
  settingId    String   @id @default(cuid()) @map("setting_id")
  settingKey   String   @unique @map("setting_key") @db.VarChar(50)
  settingValue String   @map("setting_value") @db.VarChar(255)
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("admin_settings")
}

model Participant {
  participantId    String   @id @default(cuid()) @map("participant_id")
  bookingId        String   @map("booking_id")
  participantName  String   @map("participant_name") @db.VarChar(100)
  participantEmail String?  @map("participant_email") @db.VarChar(150)
  addedAt          DateTime @default(now()) @map("added_at")
  booking          Booking  @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)

  @@map("participants")
}

model RoomClosure {
  closureId     String   @id @default(cuid()) @map("closure_id")
  roomId        Int      @map("room_id")
  startDatetime DateTime @map("start_datetime")
  endDatetime   DateTime @map("end_datetime")
  reason        String   @db.VarChar(255)
  createdBy     String   @map("created_by") @db.VarChar(100)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  room          Room     @relation(fields: [roomId], references: [roomId])

  @@map("room_closures")
}